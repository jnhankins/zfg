let Int := i32
let my_type: MyType = (5)
let MyType := (let q: i32)

pub main := (let x: Int) => i32 {
  let y := x + 1
  let z := x + 2
  if y == 2 { return 0 }
  return 3
}

pub collatz := (mut x: i32) => i32 {
  mut s := 0
  while x != 1 {
    s += 1
    if x % 2 == 0 {
      x = x / 2
    } else {
      x = 3 * x + 1
    }
  }
  return x
}

pub collatz_stupid := (mut x: i32) => i32 {
  let on_even := () => () {
    x /= 2
    next()
  }
  let on_odd := () => () {
    x = 3 * x + 1
    next()
  }
  mut s: i32 = 0
  let next := () => ()  {
    if x == 1 { return }
    s += 1
    if x % 2 == 0 { on_even() } else { on_odd() }
  }
  next()
  return s
}
